<launch>

  <arg name="x" default="0.0"/>
  <arg name="y" default="0.0"/>
  <arg name="z" default="0.9"/>
  <arg name="roll" default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="yaw" default="0.0"/>

  <arg name="cmd_timeout" default="0.5"/>
  <arg name="namespace" default="/"/> 
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="verbose" default="false"/>
  <arg name="world_name" default="worlds/empty.world"/> <!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable -->

  <!-- Start gazebo and load the world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch" >
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="verbose" value="$(arg verbose)"/>
    <arg name="world_name" value="$(arg world_name)"/>
  </include>

<!-- Convert xacro model file and put on parameter server -->
<param name="robot_description" command="$(find xacro)/xacro.py '$(find bad_robot_urdf)/urdf/diff_wheeled_robot.xacro'" />

<!-- Spawn the robot from parameter server into Gazebo -->
    <node name="spawn_vehicle" pkg="gazebo_ros" type="spawn_model"
          args="-urdf -param robot_description -model brobot
                -gazebo_namespace /$(arg namespace)/gazebo
                -x $(arg x) -y $(arg y) -z $(arg z)
                -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"/>

<!-- start a robot_state_publisher -->
    <!-- Read joint positions from joint_states, then publish the vehicle's
         state to tf. -->
<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <param name="publish_frequency" type="double" value="30.0" />

<!-- start a joint_state_publisher -->
<!-- Anpassen? siehe ackermann -->
<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

<!-- launch rviz using a specific config file -->
 <!-- <node pkg="rviz" type="rviz" name="rviz" args="-d $(find bad_robot_urdf)/rviz_config/brobot.rviz"/> -->

<!-- Load the joint controllers. One of these publishes the joint states
         to joint_states. -->
  <!-- <node name="controller_spawner" pkg="controller_manager" type="spawner"
    args="$(find bad_robot_gazebo)/config/brobot_joint_ctrlr_params.yaml"/> -->

    <!-- Control the steering, axle, and shock absorber joints. -->
    <!-- <node name="ackermann_controller" pkg="bad_robot_gazebo"
          type="ackermann_controller">
      <param name="cmd_timeout" value="$(arg cmd_timeout)"/>
      <rosparam file="$(find bad_robot_gazebo)/config/brobot_ackermann_ctrlr_params.yaml" command="load"/>
    </node> -->

<!-- Controller -->
		<node pkg="joy" name="Joystick" type="joy_node"/>
    <!-- <node pkg="bad_robot_gazebo" name="joy_to_ackermann" type="ackermann_cmd_vel.py"/> -->
    <node pkg="bad_robot_gazebo" name="joy_to_ackermann" type="control.py"/>

</launch>
